
using System;
using System.Text;
using System.Threading.Tasks;
using System.Net;
using System.Net.Sockets;
using System;
using System.Collections.Concurrent;
using System.Net.WebSockets;
using System.Threading;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;

// aici restul de informatii

public class spiceGUI
{
    public string GoofySectionId { get; set; }
    public int Spice { get; set; }
}

public class forceGUI
{
    public string GoofySectionId { get; set; }
    public string Faction { get; set; }
    public int Forces { get; set; }
}

public class otherPlayerGUI
{
    public string Username { get; set; } = "Username";
    public int Faction { get; set; }
    public bool Bot { get; set; } = false;
    public int Spice { get; set; }
    public int NrTreatcheryCards { get; set; } = 1;
}

public class lobbyInfo
{
    public bool[] factionIsPicked = new bool[7];
    public lobbyInfo() {
        for (int i = 1; i < 7; i++)
            factionIsPicked[i] = false;
    }
}

public class playerData
{
    ////////////////// BASIC DATA
    public int playerID; /* 1 -> 6 */
    public string authToken; /* playerX */

    public string username;

    ////////////////// GAME DATA
    public dynamic json;
    public int faction { get; set; }= -1;
    public spiceGUI[] spice { get; set; }
    public forceGUI[] forces { get; set; }
    public otherPlayerGUI[] otherPlayers { get; set; }
    public int[] traitorCards { get; set; }
    public string[] treacheryCards { get; set; }
    public int nrOfTreacheryCards { get; set; } = 0;
    public bool isBot { get; set; } = false;
    public int ForcesReserve { get; set; }
    public int forcesDead { get; set; } = 0;
    public int forcesDeployed { get; set; } = 0;

    // OTHER PLAYERS

    public int round { get; set; }
    public int phase { get; set; } = 1;
    public int playerId { get; set; }
}

public class Program
{
    public static async Task Main(string[] args)
    {
        await new GameClient().Run(args);
    }
}
// Method to add playerData to the dictionary

public class GameClient
{
    // player information
    private Dictionary<string, playerData> playerDataDictionary = new Dictionary<string, playerData>();
    private lobbyInfo lobby = new lobbyInfo();
    public bool gameIsRunning = false;
    // SERVER COMMUNICATION CLIENT
    static readonly HttpClient client = new HttpClient();
    // URL FOR SERVER COMM
    static string baseUrl = "http://localhost:1234/";



    public async Task Run(string[] args)
    {
        // COMMUNICATION WITH GODOT
        HttpListener listener = new HttpListener();
        listener.Prefixes.Add("http://localhost:1236/");
        listener.Start();
        Console.WriteLine("Listening on port 1236...");

        // START WEBSOCKET MANAGER
        WebSocketManager wsManager = new WebSocketManager(this);
        // do NOT put await on this, the code won't work, tyy <3
        wsManager.StartWebSocketServerAsync("http://localhost:2000/");

        // COMMUNICATION LOOP
        while (true)
        {
            // get gamestate for everyone
            if (gameIsRunning)
            {
                foreach (var player in playerDataDictionary.Values)
                {
                    string gamestate = await GetGamestate(player.authToken, Convert.ToString(player.faction));
                    player.json = Newtonsoft.Json.JsonConvert.DeserializeObject(gamestate);
                }
            }

            HttpListenerContext context = await listener.GetContextAsync();
            HttpListenerRequest request = context.Request;
            HttpListenerResponse response = context.Response;

            string responseString = await ProcessRequestAsync(request.RawUrl);
            byte[] buffer = Encoding.UTF8.GetBytes(responseString);
            // Console.WriteLine("{0} request received for {1}", request.HttpMethod, request.RawUrl);

            response.ContentType = "application/json"; // Set content type to JSON
            response.ContentLength64 = buffer.Length;
            response.OutputStream.Write(buffer, 0, buffer.Length);
            response.OutputStream.Close();
        }
    }

    public GameClient()
    {
        // InitializeDefaultCredentials();
    }

    public void AddPlayerData(string username, playerData data)
    {
        if (playerDataDictionary.Count >= 6)
        {
            Console.WriteLine("Cannot add more players. The dictionary is full.");
            return;
        }

        if (!playerDataDictionary.ContainsKey(username))
        {
            playerDataDictionary[username] = data;
            Console.WriteLine($"Player data for {username} added successfully.");
        }
        else
        {
            Console.WriteLine($"Player data for {username} already exists.");
        }
    }
    public void RemovePlayerData(string username)
    {
        if (playerDataDictionary.ContainsKey(username))
        {
            lobby.factionIsPicked[playerDataDictionary[username].faction] = false;
            playerDataDictionary.Remove(username);

            Console.WriteLine($"Player data for {username} removed successfully.");
        }
        else
        {
            Console.WriteLine($"Player data for {username} does not exist.");
        }
    }

    public async Task SendPlayerAction(string action, string faction)
    {
        string endpoint = "/playeraction/" + "player" + faction;
        var content = new StringContent(action);
        HttpResponseMessage response = await client.PostAsync(baseUrl + endpoint, content);
        response.EnsureSuccessStatusCode();
    }

    static async Task<string> AuthenticateUser(string username, string password)
    {
        var requestBody = new StringContent($"{username}:{password}", Encoding.UTF8, "application/x-www-form-urlencoded");
        var response = await client.PostAsync(baseUrl + "auth", requestBody);
        return await response.Content.ReadAsStringAsync();
    }

    static async Task<string> GetGamestate(string authToken, string faction)
    {
        client.DefaultRequestHeaders.Remove("Authorization");
        client.DefaultRequestHeaders.Add("Authorization", authToken);
        var response = await client.GetAsync(baseUrl + $"gamestate/player{faction}");
        // Console.WriteLine($"Asking for: gamestate/player{faction}");
        return await response.Content.ReadAsStringAsync();
    }

    static async Task<string> InitializeGamestate(string theAuthToken, string gamestate)
    {
        client.DefaultRequestHeaders.Remove("Authorization");
        client.DefaultRequestHeaders.Add("Authorization", theAuthToken);
        var requestBody = new StringContent(gamestate, Encoding.UTF8, "application/json");
        var response = await client.PostAsync(baseUrl + "initialization", requestBody);
        return await response.Content.ReadAsStringAsync();
    }

    // Andreea: idk cat de bun e
    public async Task<string> SendPhase1(string username, int stormValue)
    {
        var response = await client.GetAsync(baseUrl + $"{playerDataDictionary[username].playerId}/phase_1_input/{stormValue}");
        return await response.Content.ReadAsStringAsync();
    }
    public async Task<string> SendBot(string username, int faction, string mode)
    {
        string fName = "error";
        switch (faction)
        {
            case 1:
                fName = "Atreides";
                break;
            case 2:
                fName = "Bene_Gesserit";
                break;
            case 3:
                fName = "Emperor";
                break;
            case 4:
                fName = "Fremen";
                break;
            case 5:
                fName = "Spacing_Guild";
                break;
            case 6:
                fName = "Harkonnen";
                break;
        }
        var response = await client.GetAsync(baseUrl + $"set-bot/player{playerDataDictionary[username].playerId}/{fName}/{mode}");
        return await response.Content.ReadAsStringAsync();
    }
    public async Task<string> SendBenePredict(string faction, string round)
    {
        var response = await client.GetAsync(baseUrl + $"player2/setup/player{faction}/{round}");
        return await response.Content.ReadAsStringAsync();
    }
    public async Task<string> SendFremenSetup(string sectionId, string forces)
    {
        var response = await client.GetAsync(baseUrl + $"player4/setup/{sectionId}/{forces}");
        return await response.Content.ReadAsStringAsync();
    }
    public async Task<string> SendTraitorSelect(string faction, string traitorName)
    {
        var response = await client.GetAsync(baseUrl + $"player{faction}/setup/{traitorName}");
        return await response.Content.ReadAsStringAsync();
    }
    public async Task<string> SendStormValue(string faction, string stormValue)
    {
        var response = await client.GetAsync(baseUrl + $"player{faction}/phase_1_input/{stormValue}");
        return await response.Content.ReadAsStringAsync();
    }
    public async Task<string> SendRegister(string usrname, string password, string mail)
    {
        var response = await client.GetAsync(baseUrl + $"register/{usrname}/{password}/{mail}");
        return await response.Content.ReadAsStringAsync();
    }
    public async Task<string> SendPhase4(string faction, string bidValue)
    {
        Console.WriteLine("sending phase 4");
        var response = await client.GetAsync(baseUrl + $"player{faction}/phase_4_input/{bidValue}");
        return await response.Content.ReadAsStringAsync();
    }
    public async Task<string> SendPhase5(string faction, string forcesOrLeder)
    {
        var response = await client.GetAsync(baseUrl + $"player{faction}/phase_5_input/{forcesOrLeder}");
        return await response.Content.ReadAsStringAsync();
    }
    public async Task<string> SendPhase61(string faction, string sectionId, string forces)
    {
        var response = await client.GetAsync(baseUrl + $"player{faction}/phase_6_input/1/{sectionId}/{forces}");
        return await response.Content.ReadAsStringAsync();
    }
    public async Task<string> SendPhase62(string faction, string sectionId, string sectionIdDest, string forces)
    {
        var response = await client.GetAsync(baseUrl + $"player{faction}/phase_6_input/2/{sectionId}/{sectionIdDest}/{forces}");
        return await response.Content.ReadAsStringAsync();
    }
    public async Task<string> SendPhase6Bene(string faction, string answer)
    {
        var response = await client.GetAsync(baseUrl + $"player{faction}/phase_6_input/{answer}");
        return await response.Content.ReadAsStringAsync();
    }
    public async Task<string> SendPickEnemy(string faction, string sectionId, string playerId)
    {
        var response = await client.GetAsync(baseUrl + $"player{faction}/phase_7_input/{sectionId}/player{playerId}");
        return await response.Content.ReadAsStringAsync();
    }
    public async Task<string> SendPhase71(string faction, string forces, string leader)
    {
        var response = await client.GetAsync(baseUrl + $"player{faction}/phase_7_input/{forces}/{leader}");
        return await response.Content.ReadAsStringAsync();
    }
    public async Task<string> SendPhase72(string faction, string forces, string leader, string card1)
    {
        var response = await client.GetAsync(baseUrl + $"player{faction}/phase_7_input/{forces}/{leader}/{card1}");
        return await response.Content.ReadAsStringAsync();
    }
    public async Task<string> SendPhase73(string faction, string forces, string leader, string card1, string card2)
    {
        var response = await client.GetAsync(baseUrl + $"player{faction}/phase_7_input/{forces}/{leader}/{card1}/{card2}");
        return await response.Content.ReadAsStringAsync();
    }

    // STUFF FOR COMMUNICATION WITH API ////////////////////////////////////////

    public async Task<string> ProcessRequestAsync(string request)
    {
        //Console.WriteLine($"{request}");

        // Parse request and call appropriate API function
        if (request.StartsWith("/login"))
        {
            string username = request.Split('/')[2];
            string password = request.Split('/')[3];

            string authToken = await AuthenticateUser(username, password);
            Console.WriteLine($"Auth Token: {authToken}");
            // playerDataDictionary[username].playerID = GetPlayerID(authToken);
            // string gamestate = await GetGamestate(authToken);
            // Get Gamestate for a specific player
            // string game = await InitializeGamestate(authToken, gamestate);
            // playerDataDictionary[username].json = Newtonsoft.Json.JsonConvert.DeserializeObject(gamestate);
            return Login(username, password, authToken);
        }
        else if (request.StartsWith("/pick_faction/"))
        {
            string username = request.Split('/')[2];
            int faction = int.Parse(request.Split('/')[3]);

            return pickFaction(username, faction);
        }
        else if (request.StartsWith("/set-bot/"))
        {
            string username = request.Split('/')[2];
            int faction = int.Parse(request.Split('/')[3]);
            string mode = request.Split('/')[4];

            return pickBot(username, faction, mode);
        }
        else if (request.StartsWith("/get_lobby_info"))
        {
            //Console.WriteLine($"{request}");
            return GetLobbyInfo();
        }
        else if (request.StartsWith("/get_phase_info"))
        {
            string username = request.Split('/')[2];
            return GetPhaseInfo(username);
        }
        else if (request.StartsWith("/register"))
        {
            string username = request.Split('/')[2];
            string password = request.Split('/')[3];
            string mail = request.Split('/')[4];

            return Register(username, password, mail);
        }
        else if (request.StartsWith("/get_player_data"))
        {
            string username = request.Split('/')[2];
            return GetPlayerData(username);
        }
        else if (request.StartsWith("/get_other_players_data"))
        {
            string username = request.Split('/')[2];
            return GetOtherPlayersInfo(username);
        }
        else if (request.StartsWith("/get_map_info"))
        {
            string username = request.Split('/')[2];
            return GetMapInfo(username);
        }
        else if (request.StartsWith("/bene_predict_input"))
        {
            string username = request.Split('/')[2];
            string faction = request.Split('/')[3];
            string round = request.Split('/')[4];
            return GetBenePredict(username, faction, round);
        }
        else if (request.StartsWith("/fremen_setup_input"))
        {
            string sectionId = request.Split('/')[2];
            string forces = request.Split('/')[3];
            return GetFremenSetup(sectionId, forces);
        }
        else if (request.StartsWith("/traitor_select_input"))
        {
            string username = request.Split('/')[2];
            string traitorName = request.Split('/')[3];
            return GetTraitorSelect(username, traitorName);
        }
        else if (request.StartsWith("/phase_1_input"))
        {
            string username = request.Split('/')[2];
            string stormValue = request.Split('/')[3];
            return GetPhase1Input(username, stormValue);
        }
        else if (request.StartsWith("/get_phase_2_info"))
        {
            string username = request.Split('/')[2];
            return GetPhase2Info(username);
        }
        else if (request.StartsWith("/get_phase_4_info"))
        {
            string username = request.Split('/')[2];
            return GetPhase4Info(username);
        }
        else if (request.StartsWith("/phase_4_input"))
        {
            string username = request.Split('/')[2];
            string bidValue = request.Split('/')[3];
            return GetPhase4Input(username, bidValue);
        }
        else if (request.StartsWith("/get_phase_5_info"))
        {
            string username = request.Split('/')[2];
            return GetPhase5Info(username);
        }
        else if (request.StartsWith("/phase_5_input"))
        {
            Console.WriteLine($"{request}");
            string username = request.Split('/')[2];
            string forcesOrLeder = request.Split('/')[3];
            return GetPhase5Input(username, forcesOrLeder);
        }
        else if (request.StartsWith("/phase_6_input/1/"))
        {
            Console.WriteLine($"{request}");
            string username = request.Split('/')[3];
            string sectionId = request.Split('/')[4];
            string forces = request.Split('/')[5];
            return GetPhase61Input(username, sectionId, forces);
        }
        else if (request.StartsWith("/phase_6_input/2/"))
        {
            Console.WriteLine($"{request}");
            string username = request.Split('/')[3];
            string sectionId = request.Split('/')[4];
            string sectionIdDest = request.Split('/')[5];
            string forces = request.Split('/')[6];
            return GetPhase62Input(username, sectionId, sectionIdDest, forces);
        }
        else if (request.StartsWith("/phase_6_input/"))
        {
            Console.WriteLine($"{request}");
            string username = request.Split('/')[2];
            string answer = request.Split('/')[3];
            return GetPhase6BeneInput(username, answer);
        }
        else if (request.StartsWith("/get_phase_7_info"))
        {
            string username = request.Split('/')[2];
            return GetPhase7Info(username);
        }
        else if (request.StartsWith("/pick_enemy/"))
        {
            Console.WriteLine($"{request}");
            string username = request.Split('/')[2];
            string sectionId = request.Split('/')[3];
            string playerId = request.Split('/')[4];
            return GetPickEnemyInput(username, sectionId, playerId);
        }
        else if (request.StartsWith("/phase_7_input/1/"))
        {
            Console.WriteLine($"{request}");
            string username = request.Split('/')[3];
            string forces = request.Split('/')[4];
            string leader = request.Split('/')[5];
            return GetPhase71Input(username, forces, leader);
        }
        else if (request.StartsWith("/phase_7_input2/"))
        {
            Console.WriteLine($"{request}");
            string username = request.Split('/')[2];
            string forces = request.Split('/')[3];
            string leader = request.Split('/')[4];
            string card1 = request.Split('/')[5];
            return GetPhase72Input(username, forces, leader, card1);
        }
        else if (request.StartsWith("/phase_7_input/3/"))
        {
            Console.WriteLine($"{request}");
            string username = request.Split('/')[3];
            string forces = request.Split('/')[4];
            string leader = request.Split('/')[5];
            string card1 = request.Split('/')[6];
            string card2 = request.Split('/')[7];
            return GetPhase73Input(username, forces, leader, card1, card2);
        }
        else
        {
            return "Invalid request";
        }
    }


    public string Login(string uusername, string password, string authToken)
    {
        Console.WriteLine("Trying to log in {0} with pass {1}", uusername, password);
        // REPLACE THIS WITH WHATEVER IT IS WHEN WRONG LOGIN
        if (authToken != "Game room is already full")
        {
            // VERIFY IF LOGIN WAS SUCCESSFUL DUM DUM
            playerData pData = new playerData();
            AddPlayerData(uusername, pData);
            // remember important details
            playerDataDictionary[uusername].authToken = authToken;
            playerDataDictionary[uusername].username = uusername;
            var playerData = new
            {
                username = uusername
            };
            // Serialize playerData object to JSON
            return Newtonsoft.Json.JsonConvert.SerializeObject(playerData);
        }
        else
        {
            Console.WriteLine("Refusing to accept player.");
            var playerData = new
            {
                username = "full"
            };
            // Serialize playerData object to JSON
            return Newtonsoft.Json.JsonConvert.SerializeObject(playerData);
        }
    }
    public string pickFaction(string uusername, int faction)
    {
        if (lobby.factionIsPicked[faction] || playerDataDictionary[uusername].faction != -1)
        {
            var message = new
            {
                message = "taken"
            };
            // Serialize playerData object to JSON
            return Newtonsoft.Json.JsonConvert.SerializeObject(message);
        }
        else
        {
            lobby.factionIsPicked[faction] = true;
            playerDataDictionary[uusername].faction = faction;
            var message = new
            {
                message = "ok"
            };
            // Serialize playerData object to JSON
            return Newtonsoft.Json.JsonConvert.SerializeObject(message);
        }
    }
    public string pickBot(string uusername, int faction, string mode)
    {
        if (lobby.factionIsPicked[faction] || playerDataDictionary[uusername].faction != -1)
        {
            var message = new
            {
                message = "taken"
            };
            // Serialize playerData object to JSON
            return Newtonsoft.Json.JsonConvert.SerializeObject(message);
        }
        else
        {
            SendBot(uusername, faction, mode);
            lobby.factionIsPicked[faction] = true;
            playerDataDictionary[uusername].faction = faction;
            playerDataDictionary[uusername].isBot = true;
            var message = new
            {
                message = "ok"
            };
            // Serialize playerData object to JSON
            return Newtonsoft.Json.JsonConvert.SerializeObject(message);
        }
    }
    public string Register(string uusername, string password, string email)
    {
        Console.WriteLine("Trying to register in {0} with pass {1}", uusername, password, email);
        SendRegister(uusername, password, email);
        // REPLACE THIS
        if (true)
        {
            var playerData = new
            {
                message = "ok"
            };
            // Serialize playerData object to JSON
            return Newtonsoft.Json.JsonConvert.SerializeObject(playerData);
        }
        else
        {
            var playerData = new
            {
                username = "error"
            };
            // Serialize playerData object to JSON
            return Newtonsoft.Json.JsonConvert.SerializeObject(playerData);
        }
    }
    public string GetLobbyInfo()
    {
        bool everyone = true;
        for (int i = 1; i < 7; i++) // put it i = 1 i < 7
            if (lobby.factionIsPicked[i] == false)
                everyone = false;
        gameIsRunning = everyone;
        var lobbyInfo = new {
            howMany = playerDataDictionary.Count,
            players = playerDataDictionary.Values.Select(player => new
            {
                username = player.username,
                faction = player.faction
            }).ToArray(),
            startGame = gameIsRunning
        };

        // Serialize playerData object to JSON
        return Newtonsoft.Json.JsonConvert.SerializeObject(lobbyInfo);
    }
    public string GetPhaseInfo(string username)
    {
        var phaseInfo = new {
            name = playerDataDictionary[username].json["Phase"][0]["name"],
            moment = playerDataDictionary[username].json["Phase"][0]["moment"],
            round = playerDataDictionary[username].json["Round"],
            playersToInput = playerDataDictionary[username].json["Factions_To_Move"]
        };

        // Serialize playerData object to JSON
        return Newtonsoft.Json.JsonConvert.SerializeObject(phaseInfo);
    }
    public string GetMapInfo(string username)
    {
        // Spice
        int index = 0;
        var spices = playerDataDictionary[username].json["Map"]["Spice_Dict"];
        // Console.WriteLine($"Spices: {spices}");
        playerDataDictionary[username].spice = new spiceGUI[25];

        foreach (var card in spices)
        {
            //Console.WriteLine($"Card: {card}");
            var boo = card.Value.Avaliable;
            // Console.WriteLine($"Card: {card.Name}, Quantity: {boo}");
            playerDataDictionary[username].spice[index++] = new spiceGUI { GoofySectionId = card.Name, Spice = boo };
        }
        // Forces
        index = 0;
        var territories = playerDataDictionary[username].json["Map"]["Territories"];
        playerDataDictionary[username].forces = new forceGUI[85];
        int howMany = 0;
        foreach (var territory in territories)
        {
            // Console.WriteLine($"Card: {territory.Sections[0].Id}");
            foreach (var section in territory.Sections)
            {
                foreach (var forces in section.Forces){
                    if (forces.Value != 0) {
                        // Console.WriteLine($"Force: {section.Id}, {forces.Name}, {forces.Value}");
                        playerDataDictionary[username].forces[index++] = new forceGUI { GoofySectionId = section.Id, Faction = forces.Name, Forces = forces.Value};
                        howMany++;
                    }
                }

            }
            // var boo = section.Value.Forces;
            // Console.WriteLine($"Card: {card.Name}, Quantity: {boo}");
            // playerDataDictionary[username].spice[index++] = new spiceGUI { GoofySectionId = card.Name, Spice = boo };
        }
        var mapInfo = new {
            spice = playerDataDictionary[username].spice,
            storm = playerDataDictionary[username].json["Map"]["Storm_Sector"],
            shieldDestroyed = playerDataDictionary[username].json["Map"]["Shield_Wall_Was_Destroyed"],
            howManyForces = howMany,
            forces = playerDataDictionary[username].forces
        };

        // Serialize playerData object to JSON
        return Newtonsoft.Json.JsonConvert.SerializeObject(mapInfo);
    }
    public string GetOtherPlayersInfo(string username)
    {
        // Spice
        int index = 0;
        // Console.WriteLine($"Spices: {spices}");
        playerDataDictionary[username].otherPlayers = new otherPlayerGUI[7];

        foreach (var player in playerDataDictionary.Values)
        {
            playerDataDictionary[username].otherPlayers[index++] = new otherPlayerGUI { Username = player.username, Faction = player.faction, Bot = player.isBot, Spice = player.json.Faction_Knowledge[0].Spice, NrTreatcheryCards = player.nrOfTreacheryCards};
        }

        var otherPlayersInfo = new {
            otherPlayers = playerDataDictionary[username].otherPlayers
        };

        // Serialize playerData object to JSON
        return Newtonsoft.Json.JsonConvert.SerializeObject(otherPlayersInfo);
    }
    public string GetPlayerData(string username)
    {
        // spice
        int reserves = -1;
        int deadForces = 0;
        switch (playerDataDictionary[username].faction)
        {
            case 1:
                reserves = playerDataDictionary[username].json.Reserves[0].Atreides;
                deadForces = playerDataDictionary[username].json.Tleilaxu_Tanks[0].Forces.Atreides;
                break;
            case 2:
                reserves = playerDataDictionary[username].json.Reserves[0].Bene_Gesserit;
                deadForces = playerDataDictionary[username].json.Tleilaxu_Tanks[0].Forces.Bene_Gesserit;
                break;
            case 3:
                reserves = playerDataDictionary[username].json.Reserves[0].Emperor;
                deadForces = playerDataDictionary[username].json.Tleilaxu_Tanks[0].Forces.Emperor;
                break;
            case 4:
                reserves = playerDataDictionary[username].json.Reserves[0].Fremen;
                deadForces = playerDataDictionary[username].json.Tleilaxu_Tanks[0].Forces.Fremen;
                break;
            case 5:
                reserves = playerDataDictionary[username].json.Reserves[0].Spacing_Guild;
                deadForces = playerDataDictionary[username].json.Tleilaxu_Tanks[0].Forces.Spacing_Guild;
                break;
            case 6:
                reserves = playerDataDictionary[username].json.Reserves[0].Harkonnen;
                deadForces = playerDataDictionary[username].json.Tleilaxu_Tanks[0].Forces.Harkonnen;
                break;
            default:
                Console.WriteLine("Spice error.");
                break;
        }
        int index = 0;
        var properties = playerDataDictionary[username].json["Faction_Knowledge"][0]["Treachery_Cards"].Properties();

        playerDataDictionary[username].treacheryCards = new string[4];
        foreach (var property in properties)
        {
            playerDataDictionary[username].treacheryCards[index] = property.Name;
            index++;
        }
        playerDataDictionary[username].nrOfTreacheryCards = index;

        // TRAITORS
        // Spice
        index = 0;
        var traitors = playerDataDictionary[username].json["Faction_Knowledge"][0]["Traitors"];
        // Console.WriteLine($"Spices: {traitors}");
        int count = 0;
        foreach (var card in traitors)
        {
           if (card.Id != null)
            {
                ++count;
            }
        }
        playerDataDictionary[username].traitorCards = new int[count];

        foreach (var card in traitors)
        {
            if (card.Id != null)
            {
                playerDataDictionary[username].traitorCards[index++] = card.Id;
                // Console.WriteLine($"Spices: {card.Id}");
            }
        }
        //Console.WriteLine($"{playerDataDictionary[username].json.Factions_To_Move[playerDataDictionary[username].faction-1]}");
        var playerDat = new
        {
            faction = playerDataDictionary[username].faction,
            spice = playerDataDictionary[username].json.Faction_Knowledge[0].Spice,
            forcesReserve = reserves,
            forcesDeployed = 0,
            forcesDead = deadForces,
            territories = new object[0],
            traitors = playerDataDictionary[username].traitorCards,
            treacheryCards = playerDataDictionary[username].treacheryCards,
            yourTurn = playerDataDictionary[username].json.Factions_To_Move[playerDataDictionary[username].faction-1]
        };
        // Serialize playerData object to JSON
        return Newtonsoft.Json.JsonConvert.SerializeObject(playerDat);
    }
    public string GetBenePredict(string username, string faction, string round)
    {
        SendBenePredict(faction, round);
        //SendPlayerAction("player2/setup/4", "2");
        var message = new {
            message = "ok"
        };

        // Serialize playerData object to JSON
        return Newtonsoft.Json.JsonConvert.SerializeObject(message);
    }
    public string GetFremenSetup(string sectionId, string forces)
    {
        SendFremenSetup(sectionId, forces);
        //SendPlayerAction("player2/setup/4", "2");
        var message = new {
            message = "ok"
        };

        // Serialize playerData object to JSON
        return Newtonsoft.Json.JsonConvert.SerializeObject(message);
    }
    public string GetTraitorSelect(string username, string traitorName)
    {
        SendTraitorSelect(playerDataDictionary[username].faction.ToString(), traitorName);

        var message = new {
            message = "ok"
        };

        // Serialize playerData object to JSON
        return Newtonsoft.Json.JsonConvert.SerializeObject(message);
    }
    public string GetPhase1Input(string username, string stormValue)
    {
        SendStormValue(playerDataDictionary[username].faction.ToString(), stormValue);

        var message = new {
            message = "ok"
        };

        // Serialize playerData object to JSON
        return Newtonsoft.Json.JsonConvert.SerializeObject(message);
    }
    public string GetPhase2Info(string username)
    {
        var phase2Info = new {
            lastSpiceCard = playerDataDictionary[username].json["Last_Spice_Card"]
        };

        // Serialize playerData object to JSON
        return Newtonsoft.Json.JsonConvert.SerializeObject(phase2Info);
    }
    public string GetPhase4Info(string username)
    {
        var phase4Info = new {
            lastBid = playerDataDictionary[username].json["Highest_Bid"]
        };

        // Serialize playerData object to JSON
        return Newtonsoft.Json.JsonConvert.SerializeObject(phase4Info);
    }
     public string GetPhase4Input(string username, string bidValue)
    {
        SendPhase4(playerDataDictionary[username].faction.ToString(), bidValue);

        var message = new {
            message = "ok"
        };

        // Serialize playerData object to JSON
        return Newtonsoft.Json.JsonConvert.SerializeObject(message);
    }
    public string GetPhase5Info(string username)
    {
        string[] revivableGeneralss = new string[4];
        // Forces
        var forces = playerDataDictionary[username].json.Tleilaxu_Tanks[0].Forces;
        int forcess = 0;
        int index = 0;
        switch (playerDataDictionary[username].faction)
        {
            case 1:
                index = 0;
                foreach (var leader in playerDataDictionary[username].json.Tleilaxu_Tanks[0].Revivable_Generals.Atreides)
                {
                    revivableGeneralss[index++] = leader;
                }
                foreach (var force in forces)
                {
                    // Console.WriteLine($"Card: {section.Sections[0].Id}");
                    if (force != null && force.Name == "Atreides") {
                        // Console.WriteLine($"Force: {forces}, {forces.Name}, {forces.Value}");
                        forcess = force.Value;
                    }
                    // var boo = section.Value.Forces;
                    // Console.WriteLine($"Card: {card.Name}, Quantity: {boo}");
                    // playerDataDictionary[username].spice[index++] = new spiceGUI { GoofySectionId = card.Name, Spice = boo };
                }
                break;
            case 2:
                index = 0;
                foreach (var leader in playerDataDictionary[username].json.Tleilaxu_Tanks[0].Revivable_Generals.Bene_Gesserit)
                {
                    revivableGeneralss[index++] = leader;
                }
                foreach (var force in forces)
                {
                    // Console.WriteLine($"Card: {section.Sections[0].Id}");
                    if (force != null && force.Name == "Bene_Gesserit") {
                        // Console.WriteLine($"Force: {forces}, {forces.Name}, {forces.Value}");
                        forcess = force.Value;
                    }
                    // var boo = section.Value.Forces;
                    // Console.WriteLine($"Card: {card.Name}, Quantity: {boo}");
                    // playerDataDictionary[username].spice[index++] = new spiceGUI { GoofySectionId = card.Name, Spice = boo };
                }
                break;
            case 3:
                index = 0;
                foreach (var leader in playerDataDictionary[username].json.Tleilaxu_Tanks[0].Revivable_Generals.Emperor)
                {
                    revivableGeneralss[index++] = leader;
                }
                foreach (var force in forces)
                {
                    // Console.WriteLine($"Card: {section.Sections[0].Id}");
                    if (force != null && force.Name == "Emperor") {
                        // Console.WriteLine($"Force: {forces}, {forces.Name}, {forces.Value}");
                        forcess = force.Value;
                    }
                    // var boo = section.Value.Forces;
                    // Console.WriteLine($"Card: {card.Name}, Quantity: {boo}");
                    // playerDataDictionary[username].spice[index++] = new spiceGUI { GoofySectionId = card.Name, Spice = boo };
                }
                break;
            case 4:
                index = 0;
                foreach (var leader in playerDataDictionary[username].json.Tleilaxu_Tanks[0].Revivable_Generals.Fremen)
                {
                    revivableGeneralss[index++] = leader;
                }
                foreach (var force in forces)
                {
                    // Console.WriteLine($"Card: {section.Sections[0].Id}");
                    if (force != null && force.Name == "Fremen") {
                        // Console.WriteLine($"Force: {forces}, {forces.Name}, {forces.Value}");
                        forcess = force.Value;
                    }
                    // var boo = section.Value.Forces;
                    // Console.WriteLine($"Card: {card.Name}, Quantity: {boo}");
                    // playerDataDictionary[username].spice[index++] = new spiceGUI { GoofySectionId = card.Name, Spice = boo };
                }
                break;
            case 5:
                index = 0;
                foreach (var leader in playerDataDictionary[username].json.Tleilaxu_Tanks[0].Revivable_Generals.Spacing_Guild)
                {
                    revivableGeneralss[index++] = leader;
                }
                foreach (var force in forces)
                {
                    // Console.WriteLine($"Card: {section.Sections[0].Id}");
                    if (force != null && force.Name == "Spacing_Guild") {
                        // Console.WriteLine($"Force: {forces}, {forces.Name}, {forces.Value}");
                        forcess = force.Value;
                    }
                    // var boo = section.Value.Forces;
                    // Console.WriteLine($"Card: {card.Name}, Quantity: {boo}");
                    // playerDataDictionary[username].spice[index++] = new spiceGUI { GoofySectionId = card.Name, Spice = boo };
                }
                break;
            case 6:
                index = 0;
                foreach (var leader in playerDataDictionary[username].json.Tleilaxu_Tanks[0].Revivable_Generals.Harkonnen)
                {
                    revivableGeneralss[index++] = leader;
                }
                foreach (var force in forces)
                {
                    // Console.WriteLine($"Card: {section.Sections[0].Id}");
                    if (force != null && force.Name == "Harkonnen") {
                        // Console.WriteLine($"Force: {forces}, {forces.Name}, {forces.Value}");
                        forcess = force.Value;
                    }
                    // var boo = section.Value.Forces;
                    // Console.WriteLine($"Card: {card.Name}, Quantity: {boo}");
                    // playerDataDictionary[username].spice[index++] = new spiceGUI { GoofySectionId = card.Name, Spice = boo };
                }
                break;
            default:
                Console.WriteLine("Spice error.");
                break;
        }
        if (index == 0)
            revivableGeneralss = null;

        var phase5Info = new {
            revivableGenerals = revivableGeneralss,
            forces = forcess
        };

        // Serialize playerData object to JSON
        return Newtonsoft.Json.JsonConvert.SerializeObject(phase5Info);
    }
    public string GetPhase61Input(string username, string sectionId, string forces)
    {
        SendPhase61(playerDataDictionary[username].faction.ToString(), sectionId, forces);

        var message = new {
            message = "ok"
        };

        // Serialize playerData object to JSON
        return Newtonsoft.Json.JsonConvert.SerializeObject(message);
    }
    public string GetPhase62Input(string username, string sectionId, string sectionIdDest, string forces)
    {
        SendPhase62(playerDataDictionary[username].faction.ToString(), sectionId, sectionIdDest, forces);

        var message = new {
            message = "ok"
        };

        // Serialize playerData object to JSON
        return Newtonsoft.Json.JsonConvert.SerializeObject(message);
    }
    public string GetPhase6BeneInput(string username, string answer)
    {
        SendPhase6Bene(playerDataDictionary[username].faction.ToString(), answer);

        var message = new {
            message = "ok"
        };

        // Serialize playerData object to JSON
        return Newtonsoft.Json.JsonConvert.SerializeObject(message);
    }
    public string GetPhase5Input(string username, string forcesOrLeder)
    {
        SendPhase5(playerDataDictionary[username].faction.ToString(), forcesOrLeder);

        var message = new {
            message = "ok"
        };

        // Serialize playerData object to JSON
        return Newtonsoft.Json.JsonConvert.SerializeObject(message);
    }
    public string GetPhase7Info(string username)
    {


        var phase7Info = new {
            whereAreBattles = playerDataDictionary[username].json.Faction_Battles.Battle_Sections,
            currentBattleSection = playerDataDictionary[username].json.Faction_Battles.Chosen_Battle_Section,
            enemy = playerDataDictionary[username].json.Faction_Battles.enemy,
            agressor = playerDataDictionary[username].json.Faction_Battles.faction,
        };

        // Serialize playerData object to JSON
        return Newtonsoft.Json.JsonConvert.SerializeObject(phase7Info);
    }
    public string GetPickEnemyInput(string username, string sectionId, string playerId)
    {
        SendPickEnemy(playerDataDictionary[username].faction.ToString(), sectionId, playerId);

        var message = new {
            message = "ok"
        };

        // Serialize playerData object to JSON
        return Newtonsoft.Json.JsonConvert.SerializeObject(message);
    }
    public string GetPhase71Input(string username, string forces, string leader)
    {
        SendPhase71(playerDataDictionary[username].faction.ToString(), forces, leader);

        var message = new {
            message = "ok"
        };

        // Serialize playerData object to JSON
        return Newtonsoft.Json.JsonConvert.SerializeObject(message);
    }
    public string GetPhase72Input(string username, string forces, string leader, string card1)
    {
        SendPhase72(playerDataDictionary[username].faction.ToString(), forces, leader, card1);

        var message = new {
            message = "ok"
        };

        // Serialize playerData object to JSON
        return Newtonsoft.Json.JsonConvert.SerializeObject(message);
    }
    public string GetPhase73Input(string username, string forces, string leader, string card1, string card2)
    {
        SendPhase73(playerDataDictionary[username].faction.ToString(), forces, leader, card1, card2);

        var message = new {
            message = "ok"
        };

        // Serialize playerData object to JSON
        return Newtonsoft.Json.JsonConvert.SerializeObject(message);
    }
    public class WebSocketManager
    {
        private GameClient outerInstance;

        public WebSocketManager(GameClient instance)
        {
            outerInstance = instance;
        }
    private static readonly int maxClients = 6;
    private static readonly ConcurrentDictionary<string, WebSocket> clients = new ConcurrentDictionary<string, WebSocket>();

    public static int GetNumberOfClients()
    {
        int numberOfClients = clients.Count;
        return numberOfClients;
    }
    public async Task StartWebSocketServerAsync(string url)
    {
        HttpListener listener = new HttpListener();
        listener.Prefixes.Add(url);
        listener.Start();
        Console.WriteLine("WSMANAGER: WebSocket server started");

        try
        {
            while (clients.Count < maxClients)
            {
                HttpListenerContext context = await listener.GetContextAsync();
                if (context.Request.IsWebSocketRequest)
                {
                    Console.WriteLine("WSMANAGER: Someone trying to enter");
                    ProcessWebSocketRequest(context);

                }
                else
                {
                    context.Response.StatusCode = 400;
                    context.Response.Close();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"WSMANAGER: Error: {ex.Message}");
        }
        finally
        {
            listener.Stop();
            Console.WriteLine("WSMANAGER: WebSocket server stopped");
        }
    }

    private async void ProcessWebSocketRequest(HttpListenerContext context)
    {
        HttpListenerWebSocketContext webSocketContext = null;
        try
        {
            webSocketContext = await context.AcceptWebSocketAsync(null);
            WebSocket socket = webSocketContext.WebSocket;

            // Receive username from client
            string username = await ReceiveStringAsync(socket);

            // Add client to dictionary
            clients.TryAdd(username, socket);

            Console.WriteLine($"WSMANAGER: Client connected: {username}");
            int nr = GetNumberOfClients();
                    Console.WriteLine($"WSMANAGER: Nr of clients: {nr}");

            // Handle messages from the client
            await HandleClientMessages(socket, username);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"WSMANAGER: Error: {ex.Message}");
            webSocketContext?.WebSocket.CloseAsync(WebSocketCloseStatus.InternalServerError, "Internal Server Error", CancellationToken.None);
        }
    }

    private async Task HandleClientMessages(WebSocket socket, string username)
    {
        byte[] buffer = new byte[1024];
        WebSocketReceiveResult result;
       try
        {
            do
            {
                result = await socket.ReceiveAsync(new ArraySegment<byte>(buffer), CancellationToken.None);

                if (result.MessageType == WebSocketMessageType.Text)
                {
                    string message = Encoding.UTF8.GetString(buffer, 0, result.Count);
                    Console.WriteLine($"WSMANAGER: Message received from {username}: {message}");

                    // Echo message back to the client (just an example)
                    await socket.SendAsync(new ArraySegment<byte>(buffer, 0, result.Count), result.MessageType, result.EndOfMessage, CancellationToken.None);
                }
                else if (result.MessageType == WebSocketMessageType.Close)
                {
                    // Handle WebSocket close frame received
                    await socket.CloseAsync(result.CloseStatus.Value, result.CloseStatusDescription, CancellationToken.None);
                }
            } while (!result.CloseStatus.HasValue);
        }
        catch (WebSocketException ex) when (ex.WebSocketErrorCode == WebSocketError.ConnectionClosedPrematurely)
        {
            // Client closed the WebSocket connection abruptly without completing the close handshake
            Console.WriteLine($"WSMANAGER: WebSocket connection closed abruptly by {username}");

            // Remove client from dictionary
            WebSocket removedSocket;
            clients.TryRemove(username, out removedSocket);
            outerInstance.RemovePlayerData(username);
            Console.WriteLine($"WSMANAGER: Client disconnected: {username}");
            int nr = GetNumberOfClients();
                Console.WriteLine($"WSMANAGER: Nr of clients: {nr}");
            outerInstance.gameIsRunning = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"WSMANAGER: Error: {ex.Message}");
        }

    }

    private async Task<string> ReceiveStringAsync(WebSocket socket)
    {
        byte[] buffer = new byte[1024];
        WebSocketReceiveResult result = await socket.ReceiveAsync(new ArraySegment<byte>(buffer), CancellationToken.None);
        return Encoding.UTF8.GetString(buffer, 0, result.Count);
    }
}
}

